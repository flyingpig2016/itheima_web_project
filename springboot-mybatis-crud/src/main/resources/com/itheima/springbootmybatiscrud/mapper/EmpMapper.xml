<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
1. xml映射文件的名称与mapper接口名称一致，并且将xml映射文件和mapper接口放在同一包下；
2. xml映射文件的namespace属性与mapper接口全限定名一致
3. xml映射文件中sql语句的id与mapper接口中的方法名一致，并且保持返回类型一致
-->
<mapper namespace="com.itheima.springbootmybatiscrud.mapper.EmpMapper">

    <sql id="commonSelect">
        select id,
               username,
               password,
               name,
               gender,
               image,
               job,
               entrydate,
               dept_id     deptId,
               create_time createTime,
               update_time updateTime
        from emp
    </sql>

    <!--    动态更新员工信息-->
    <update id="update2">
        update emp
        <set>
            <if test="username != null">
                username=#{username},
            </if>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="gender != null">
                gender=#{gender},
            </if>
            <if test="image != null">
                image=#{image},
            </if>
            <if test="job != null">
                job=#{job},
            </if>
            <if test="entrydate != null">
                entrydate=#{entrydate},
            </if>
            <if test="deptId != null">
                dept_id=#{deptId},
            </if>
            <if test="updateTime != null">
                update_time=#{updateTime}
            </if>
        </set>
        where id = #{id};

    </update>


    <!-- id为mapper接口的方法名   resultType 单条记录封装的类型 -->
    <select id="list" resultType="com.itheima.springbootmybatiscrud.pojo.Emp">
        # select * from emp where name like concat('%',#{name},'%') and gender = #{gender} and entrydate between
        #{begin}
        # and #{end} order by update_time desc;
        # 动态sql
        # select * from emp
        <include refid="commonSelect"></include>
        <where>
            <if test="name != null">
                name like concat('%', #{name}, '%')
            </if>

            <if test="gender != null">
                and gender = #{gender}
            </if>

            <if test="begin != null and end != null">
                and entrydate between #{begin} and #{end}
            </if>
            order by update_time desc
        </where>
    </select>


    <!--    批量删除-->
    <!--    delete from emp where id in (10, 19, 20)
        collection 要遍历的集合
        item: 元素
        separator 分隔符
        open 遍历开始前拼接的sql片段
        close: 遍历结束后拼接的sql片段
    -->
    <delete id="deleteByIds">
        delete from emp where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

</mapper>